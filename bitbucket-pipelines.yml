image: docuteam/maven:master

clone:
  lfs: false
  depth: full

definitions:
  services:
    mysql:
      image: mysql:5.7
      variables:
        MYSQL_DATABASE: "pipelines"
        MYSQL_RANDOM_ROOT_PASSWORD: "yes"
        MYSQL_USER: "test_user"
        MYSQL_PASSWORD: "test_user_password"
    docker:
      memory: 3072
  caches:
    sonar: ~/.sonar/cache  # Cache for SonarCloud artifacts

  steps:
    - step: &build_test_analyze
        name: Build, unit tests and analyze
        caches:
          - maven
          - sonar
        script:
          - mvn -version
            # install nodejs for CSS analysis by SonarCloud
          - curl -sL https://deb.nodesource.com/setup_13.x | bash - &&
            apt-get install -y nodejs
            # unit tests only
            # the sonar cloud plugin is not thread safe,
            # so we use only on thread
          - mvn -B
            -Dsha1=-$BITBUCKET_COMMIT
            -Dchangelist=
            -DskipITs=true -DskipGUITests=true
            verify
            sonar:sonar
        artifacts:
          - docuteam-rservices/target/docuteam-rservices.war

    - step: &integration_tests
        name: Integration tests
        caches:
          - maven
        script:
          - mvn -version

          - PROJECTS=docuteam-darc,docuteam-aipcreatorotcs
          # build everything necessary to run the integration tests
          - mvn -DskipITs=true
            -DskipGUITests=true
            -DskipUnitTests=true
            -pl $PROJECTS
            --also-make
            install

          # run the integration tests
          - mvn -pl $PROJECTS
            -DexcludedGroups=ch.docuteam.test.BlackBox
            -DskipUnitTests=true
            verify

    - step: &build_test_rservices
        name: Build and test rservices
        image: tmaier/docker-compose
        services:
          - docker
        caches:
          - docker
          - maven
        script:
          - docker build -t docuteam/rservices:$BITBUCKET_BRANCH ./docuteam-rservices/

          # this is a hack to partly use the maven cache in the docker container
          # replace it as soon as https://docuteam.atlassian.net/browse/PIPE-38 is done
          - cp -R ~/.m2 $BITBUCKET_CLONE_DIR/.m2
          - chmod -R 777 $BITBUCKET_CLONE_DIR/.m2

          - export MAVEN_DIRECTORY=$BITBUCKET_CLONE_DIR/.m2
          - export COSMOS_ROOT_DIRECTORY=$BITBUCKET_CLONE_DIR
          - export TAG=$BITBUCKET_BRANCH
          - export COMPOSE_HTTP_TIMEOUT=200
          - docker-compose -f docuteam-rservices-test/docker-compose.yml up --abort-on-container-exit --exit-code-from tests

          - echo $DOCKERHUB_PASSWORD | docker login docker.io --username $DOCKERHUB_USER --password-stdin
          - docker push docuteam/rservices:$BITBUCKET_BRANCH

    - step: &integration_tests_with_mysql
        name: Integration tests with MySQL
        services:
          - mysql
        caches:
          - maven
        script:
          - mvn -version
          # integration tests only
          - PROJECTS=docuteam-aipcreatoreth
          - mvn -B -T1C
            --projects $PROJECTS --also-make
            -DskipUnitTests=true
            -Dit.test="ch/docuteam/aipcreatorETH/**/*IT", -DfailIfNoTests=false
            -DexcludedGroups=ch.docuteam.test.BlackBox
            -Dtest.db.host=127.0.0.1 -Dtest.db.service=pipelines -Dtest.db.name=pipelines -Dtest.db.user=test_user -Dtest.db.password=test_user_password
            -P clean-mysql-dbsetup,tests-with-mysql
            verify

    - step: &converter_integration_tests
        name: docuteam-converter integration tests
        image: tmaier/docker-compose
        services:
          - docker
        caches:
          - docker
          - maven
        script:
          # this is a hack to partly use the maven cache in the docker container
          # replace it as soon as https://docuteam.atlassian.net/browse/PIPE-38 is done
          - cp -R ~/.m2 $BITBUCKET_CLONE_DIR/.m2
          - chmod -R 777 $BITBUCKET_CLONE_DIR/.m2

          - export MAVEN_DIRECTORY=$BITBUCKET_CLONE_DIR/.m2
          - export COSMOS_ROOT_DIRECTORY=$BITBUCKET_CLONE_DIR
          - export TAG=$BITBUCKET_BRANCH
          - docker-compose -f docuteam-converter/docker-compose.yml up --abort-on-container-exit --exit-code-from tests

    - step: &packer_integration_tests
        name: docuteam-packer integration tests
        image: tmaier/docker-compose
        services:
          - docker
        caches:
          - docker
          - maven
        script:
          # this is a hack to partly use the maven cache in the docker container
          # replace it as soon as https://docuteam.atlassian.net/browse/PIPE-38 is done
          - cp -R ~/.m2 $BITBUCKET_CLONE_DIR/.m2
          - chmod -R 777 $BITBUCKET_CLONE_DIR/.m2

          - export MAVEN_DIRECTORY=$BITBUCKET_CLONE_DIR/.m2
          - export COSMOS_ROOT_DIRECTORY=$BITBUCKET_CLONE_DIR
          - export TAG=$BITBUCKET_BRANCH
          - docker-compose -f docuteam-packer/docker-compose.yml up --abort-on-container-exit --exit-code-from tests

    - step: &tools_integration_tests
        name: docuteam-tools integration tests
        image: tmaier/docker-compose
        services:
          - docker
        caches:
          - docker
          - maven
        script:
          # this is a hack to partly use the maven cache in the docker container
          # replace it as soon as https://docuteam.atlassian.net/browse/PIPE-38 is done
          - cp -R ~/.m2 $BITBUCKET_CLONE_DIR/.m2
          - chmod -R 777 $BITBUCKET_CLONE_DIR/.m2

          - export MAVEN_DIRECTORY=$BITBUCKET_CLONE_DIR/.m2
          - export COSMOS_ROOT_DIRECTORY=$BITBUCKET_CLONE_DIR
          - export TAG=$BITBUCKET_BRANCH
          - docker-compose -f docuteam-tools/docker-compose.yml up --abort-on-container-exit --exit-code-from tests

    - step: &feeder_integration_tests
        name: docuteam-feeder integration tests
        image: tmaier/docker-compose
        services:
          - docker
        caches:
          - docker
          - maven
        script:
          # this is a hack to partly use the maven cache in the docker container
          # replace it as soon as https://docuteam.atlassian.net/browse/PIPE-38 is done
          - cp -R ~/.m2 $BITBUCKET_CLONE_DIR/.m2
          - chmod -R 777 $BITBUCKET_CLONE_DIR/.m2

          - export MAVEN_DIRECTORY=$BITBUCKET_CLONE_DIR/.m2
          - export COSMOS_ROOT_DIRECTORY=$BITBUCKET_CLONE_DIR
          - export TAG=$BITBUCKET_BRANCH
          - docker-compose -f docuteam-feeder/docker-compose.yml up --abort-on-container-exit --exit-code-from tests

    - step: &deploy_snapshot
        name: Maven deploy snapshot
        caches:
          - maven
        script:
          - mvn -version
          - mvn -B -T1C
            -Dsha1=-$BITBUCKET_COMMIT
            -Dchangelist=
            -DskipUnitTests=true -DskipITs=true -DskipGUITests=true
            -Dmaven.source.skip=false
            -Ddeploy.repository=snapshots
            deploy

pipelines:
  default:
    - step: *build_test_analyze
    - parallel:
        - step: *integration_tests
        - step: *build_test_rservices
        - step: *integration_tests_with_mysql
        - step: *converter_integration_tests
        - step: *packer_integration_tests
        - step: *tools_integration_tests
        - step: *feeder_integration_tests
    - step:
        <<: *deploy_snapshot
        trigger: manual

  branches:
    '{master,release-*}':
      - step: *build_test_analyze
      - parallel:
          - step: *integration_tests
          - step: *build_test_rservices
          - step: *integration_tests_with_mysql
          - step: *converter_integration_tests
          - step: *packer_integration_tests
          - step: *tools_integration_tests
          - step: *feeder_integration_tests
      - step: *deploy_snapshot
      - step:
          name: Release without SHA
          trigger: manual
          caches:
            - maven
          script:
            - mvn -version
            - VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dchangelist= -Dsha1= -Dexpression=project.version -q -DforceStdout)
            - git tag -a "version-$VERSION" -m "Promoting release $VERSION"
            - echo "Tagged release $VERSION"
            - mvn -B -T1C
              -Dsha1=
              -Dchangelist=
              -DskipUnitTests=true -DskipITs=true -DskipGUITests=true
              -Dmaven.source.skip=false
              -Ddeploy.repository=releases
              deploy
            - git push origin version-$VERSION
