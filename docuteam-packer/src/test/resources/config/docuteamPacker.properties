################################
#  docuteam packer properties - needed for automated GUI testing #
################################

# Display language (if undefined or empty, use the OS language):
# docuteamPacker.displayLanguage = de

# The default data directory, used for "Insert" and "New" (if undefined or empty, use SIPDir):
# NOTE: Environment variables can be referenced by embedding them between "${" and "}", e.g. "${HOMEPATH}/Desktop"
# docuteamPacker.dataDir.Win = 
# docuteamPacker.dataDir.OSX = 
# docuteamPacker.dataDir.Linux = 

# The default SIP directory, used for "Save as", "Open", and "New" (if undefined or empty, use user home):
# NOTE: Environment variables can be referenced by embedding them between "${" and "}", e.g. "${HOMEPATH}/Desktop"
# docuteamPacker.SIPDir.Win = 
# docuteamPacker.SIPDir.OSX = 
# docuteamPacker.SIPDir.Linux = 

# The backup directory, used when saving SIPs (if undefined or empty, use SIPDir):
# NOTE: Environment variables can be referenced by embedding them between "${" and "}", e.g. "${HOMEPATH}/Desktop"
# docuteamPacker.backupDir.Win = 
# docuteamPacker.backupDir.OSX = 
# docuteamPacker.backupDir.Linux = 

# The directory the templates are stored in and retrieved from (if undefined or empty, use SIPDir):
# NOTE: Environment variables can be referenced by embedding them between "${" and "}", e.g. "${HOMEPATH}/Desktop"
# docuteamPacker.templateDir.Win = 
# docuteamPacker.templateDir.OSX = 
# docuteamPacker.templateDir.Linux = 

# The directory the export templates (xsl) are stored in and retrieved from (if undefined or empty, use "./templates/exports"):
# NOTE: Environment variables can be referenced by embedding them between "${" and "}", e.g. "${HOMEPATH}/Desktop"
# docuteamPacker.exportsDir.Win = 
# docuteamPacker.exportsDir.OSX = 
# docuteamPacker.exportsDir.Linux = 

# The directory the report templates (xsl) are stored in and retrieved from (if undefined or empty, use "./templates/reports"):
# NOTE: Environment variables can be referenced by embedding them between "${" and "}", e.g. "${HOMEPATH}/Desktop"
# docuteamPacker.reportsDir.Win = 
# docuteamPacker.reportsDir.OSX = 
# docuteamPacker.reportsDir.Linux = 

# The report destination directory (if undefined or empty, uses "${HOMEPATH}/Desktop):
# NOTE: Environment variables can be referenced by embedding them between "${" and "}", e.g. "${HOMEPATH}/Desktop"
# docuteamPacker.reportsDestinationDir.Win = 
# docuteamPacker.reportsDestinationDir.OSX = 
# docuteamPacker.reportsDestinationDir.Linux = 

# The temp-folder for temporary files can be set here (if undefined or empty, use the folder "DocuteamPacker" in the java temp dir (System.getProperty("java.io.tmpdir"))):
# NOTE: Environment variables can be referenced by embedding them between "${" and "}", e.g. "${HOMEPATH}/Desktop"
# docuteamPacker.tempDir.Win = 
# docuteamPacker.tempDir.OSX = 
# docuteamPacker.tempDir.Linux = 

# Indicate a path where lock files for SIPs should be stored. By default, the lock file is placed into the same folder as the SIP itself.
# NOTE: the account running packer must have write permissions on this folder.
# docuteamPacker.lockFilesDir.Win = 
# docuteamPacker.lockFilesDir.OSX = 
# docuteamPacker.lockFilesDir.Linux = 

# For the submission process: The class name of the AIPCreator (if undefined or empty, don't use):
# docuteamPacker.AIPCreator.className = ch.docuteam.darc.ingest.AIPCreatorBasic

# For the submission process: The directory where to copy the submitted SIPs to (= ingest drop folder) (if undefined or empty, don't use):
# NOTE: Environment variables can be referenced by embedding them between "${" and "}", e.g. "${HOMEPATH}/Desktop"
# AIPCreator.ingestSubmitDir.Win = 
# AIPCreator.ingestSubmitDir.OSX = 
# AIPCreator.ingestSubmitDir.Linux = 

# When true (case doesn't matter), the source files for a new SIP are deleted after the SIP creation; defaults to "false"
# docuteamPacker.newSIPDeleteSourcesByDefault = false

# When true (case doesn't matter), the default format of a new SIP is a zipped archive; otherwise it is a folder (undefined = true):
# docuteamPacker.newSIPDefaultsToZipped = false

# When true (case doesn't matter), the default migration action will be set to keep the original file together with the selected migrated file; otherwise it will replace the original file (undefined = true):
# docuteamPacker.migrateFileKeepOriginal = false

# When true (case doesn't matter), create a backup on every save; otherwise not (undefined = true):
# docuteamPacker.versioning = false

# When docuteamPacker.versioning = true, set here the max. number of backups. Exeeding backups will be deleted (if undefined or empty, use default = 10)
# docuteamPacker.versioning.keepBackupsCount = 20

# When true (case doesn't matter), the docuteam packer screen opens in full screen mode; otherwise use screen size and position as specified below (default = false):
# docuteamPacker.openFullScreen = true

# When openFullScreen is not true, these values denote the docuteam packer screen size on startup (if undefined, take 1000 x 700):
# docuteamPacker.screenSize.x = 1200
# docuteamPacker.screenSize.y = 1000

# When openFullScreen is not true, these values denote the docuteam packer screen position on startup (if undefined, center on screen):
# docuteamPacker.screenPos.x = 100
# docuteamPacker.screenPos.y = 100

# When true (case doesn't matter), use system look-and-feel; otherwise use cross-platform = "Metal" (undefined = true):
# docuteamPacker.useSystemLookAndFeel = false

# Set the default digest algorithm to calculate file checksums (valid values: CRC-32, MD5, SHA-1, SHA-256, SHA-512)
# docuteamPacker.defaultChecksumAlgorithm = MD5

# If DROID should use configuration files other than the default, give the paths here:
# docuteamPacker.droid.signatureFile = ./config/DROID_SignatureFile_V97.xml
# docuteamPacker.droid.containerFile = ./config/container-signature-20201001.xml
# docuteamPacker.droid.extensionUsage = 0

# When true, retrieve the current SAs from the server (from URL below) on startup; otherwise don't (undefined = false):
# docuteamPacker.SA.getSAsFromServerOnStartup = true

# The URL of the SA editor application (webjaxe):
# docuteamPacker.SA.BASE.URL = 

# The complete file path to the OOO application ("OpenOffice.org" or "OpenOffice.org 3") (if undefined or empty, use the internal OOO application;
# 	if undefined or empty AND the internal OOO application doesn't exist, assume that no OOO application shall be used):
# docuteamPacker.OOConverter.path.Win = C:\Program Files\OpenOffice.org 3
# docuteamPacker.OOConverter.path.OSX = /Applications/OpenOffice.org.app
# docuteamPacker.OOConverter.path.Linux = 

# The number of initialization retries for the OOConverter (if empty, undefined, negative, or 0, use the default number, which is 10):
# docuteamPacker.OOConverter.initializationRetries = 30

# The url of the 3-Heights converter service (if empty or undefined, use the default url "tcp://localhost:7981/O2PService"):
# docuteamPacker.pdftools.url = tcp://localhost:7981/O2PService

# The number of files to cache for the file preview (if undefined or empty, use the default cache size, which is 100):
# docuteamPacker.filePreviewer.cacheSizeLimit = 10

# When true, the SystemOutView opens when output occurs; otherwise not (undefined = true):
# docuteamPacker.openSystemOutViewOnOutput = false

# When true, expand all nodes in tree of SIPView (if undefined or empty, use false as default)
# docuteamPacker.SIPView.TreeExpandAll = true

# When a value between 1 and 3 is given, the appropriate tab in SIPView is automatically set (if undefined or empty, 1 is assumed)
# docuteamPacker.SIPView.DefaultTab = 1

# Specify the display order for dynamic metadata selector: 
#  - "none" (default) : no sorting; elements are displayed according XML order
#  - "alphabetical" : elements are sorted based on translated names 
# docuteamPacker.SIPView.metadataOrder = "alphabetical" 

# Configuration of consecutive file names generator:
#  - path for a file in which the next generated number will be stored
# docuteamPacker.DOIGenerator.nextNumberFilePath = ""
#  - string to be prepended in generated file names (e.g.: "prf12"); when missing, using no prefix (e.g. "12") 
# docuteamPacker.DOIGenerator.prefix = ""

# Actions not visible: comma-separated list of actionIDs (referring to the actions' instance variable names in SIPView)
# docuteamPacker.actionsNotVisible = deleteItemDontAskAction,deleteItemAction,deleteFileContentAction,exploreAction,deleteSourcesCreateNewCheckbox
# Note: normally, SIP file system location should not be accessed externally: desynchronization risk between mets.xml and corresponding folder structure  
docuteamPacker.actionsNotVisible = exploreAction
